import { getWorldTidesData } from './worldtides'
import { getSimpleTideData } from './tide-direct'

// Simulation : avancer de X jours dans le futur
export async function simulateFutureDate(daysInFuture: number = 6): Promise<void> {
  console.log(`\nüïí === SIMULATION : On fait comme si on √©tait dans ${daysInFuture} jours ===`)
  
  // Calculer la date simul√©e
  const futureDate = new Date()
  futureDate.setDate(futureDate.getDate() + daysInFuture)
  const futureDateStr = futureDate.toLocaleDateString('en-CA', { timeZone: 'Asia/Manila' })
  
  console.log('üìÖ Date simul√©e:', futureDateStr)
  console.log('üìÖ Date r√©elle:', new Date().toLocaleDateString('en-CA', { timeZone: 'Asia/Manila' }))
  
  // Temporairement modifier la fonction getSimpleTideData pour utiliser la date future
  console.log('\n1Ô∏è‚É£ Test avec getSimpleTideData (utilis√© par TideCurve):')
  await testSimpleTideData(futureDateStr)
  
  console.log('\n2Ô∏è‚É£ Test avec getWorldTidesData (utilis√© par AI reports):')
  await testWorldTidesData(futureDateStr)
  
  console.log('\n‚úÖ Simulation termin√©e!')
}

async function testSimpleTideData(targetDate: string): Promise<void> {
  try {
    // Modifier temporairement tide-direct pour utiliser la date cible
    const originalModule = await import('./tide-direct')
    
    // On va directement tester getTideCacheForDate avec la date future
    const { getTideCacheForDate } = await import('./tide-cache')
    
    console.log(`[Simulation] Recherche des donn√©es cach√©es pour: ${targetDate}`)
    const cachedData = await getTideCacheForDate(targetDate)
    
    if (cachedData) {
      console.log('‚úÖ Donn√©es trouv√©es dans le cache:', {
        heights: cachedData.heights.length,
        extremes: cachedData.extremes.length
      })
      
      // Afficher les 3 premiers points horaires
      console.log('üìä Premiers points horaires:')
      cachedData.heights.slice(0, 3).forEach(h => {
        console.log(`   ${h.hour}:00 ‚Üí ${h.height}m`)
      })
      
      // Afficher les extremes
      console.log('üåä Extremes:')
      cachedData.extremes.forEach(e => {
        console.log(`   ${e.time} ‚Üí ${e.height}m (${e.type})`)
      })
    } else {
      console.log('‚ùå Aucune donn√©e trouv√©e dans le cache pour cette date')
      console.log('üîÑ Cela devrait d√©clencher un bulk fetch...')
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test SimpleTideData:', error)
  }
}

async function testWorldTidesData(targetDate: string): Promise<void> {
  try {
    // Pour simuler, on va directement tester shouldDoBulkFetch avec la date simul√©e
    const { shouldDoBulkFetch } = await import('./tide-cache-optimized')
    
    console.log(`[Simulation] V√©rification du besoin de bulk fetch pour la date simul√©e: ${targetDate}`)
    const bulkCheck = await shouldDoBulkFetch(targetDate)
    
    console.log('üìã R√©sultat de shouldDoBulkFetch (avec date simul√©e):')
    console.log(`   Should fetch: ${bulkCheck.shouldFetch}`)
    console.log(`   Reason: ${bulkCheck.reason}`)
    if (bulkCheck.shouldFetch) {
      console.log(`   Start date: ${bulkCheck.startDate}`)
      console.log(`   End date: ${bulkCheck.endDate}`)
      console.log('üöÄ Un bulk fetch serait d√©clench√© maintenant!')
      console.log(`   ‚û°Ô∏è  Cela fetcherait 7 jours: ${bulkCheck.startDate} √† ${bulkCheck.endDate}`)
    }
    
    // Simuler un appel √† getWorldTidesData sans vraiment faire l'API call
    console.log('\n[Simulation] Test getWorldTidesData...')
    console.log('‚ö†Ô∏è  Pour des raisons de co√ªt, on ne fait pas le vrai appel API')
    console.log('üí° Mais voici ce qui se passerait:')
    
    if (bulkCheck.shouldFetch) {
      console.log('1. Bulk fetch de 7 jours depuis WorldTides API')
      console.log('2. Organisation des donn√©es par date')
      console.log('3. Remplacement des donn√©es dans Supabase')
      console.log('4. Log du bulk fetch dans tide_fetch_log')
      console.log('5. Retour des donn√©es pour la date demand√©e')
    } else {
      console.log('1. Utilisation des donn√©es cach√©es existantes')
      console.log('2. Conversion au format attendu')
      console.log('3. Retour imm√©diat des donn√©es')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test WorldTidesData:', error)
  }
}

// Test sp√©cifique pour voir l'√©tat actuel du cache
export async function inspectCurrentCache(): Promise<void> {
  console.log('\nüîç === INSPECTION DU CACHE ACTUEL ===')
  
  const today = new Date()
  for (let i = -2; i <= 7; i++) {
    const testDate = new Date(today)
    testDate.setDate(testDate.getDate() + i)
    const dateStr = testDate.toLocaleDateString('en-CA', { timeZone: 'Asia/Manila' })
    
    const { getTideCacheForDate } = await import('./tide-cache')
    const cachedData = await getTideCacheForDate(dateStr)
    
    const status = cachedData ? 
      `‚úÖ ${cachedData.heights.length}h + ${cachedData.extremes.length}e` : 
      '‚ùå Vide'
    
    const dayLabel = i === 0 ? '(AUJOURD\'HUI)' : 
                     i === 1 ? '(DEMAIN)' : 
                     i > 0 ? `(J+${i})` : `(J${i})`
    
    console.log(`${dateStr} ${dayLabel}: ${status}`)
  }
  
  // V√©rifier le log des bulk fetches
  console.log('\nüìã Historique des bulk fetches:')
  try {
    const { supabase } = await import('./supabase')
    if (supabase) {
      const { data: logs } = await supabase
        .from('tide_fetch_log')
        .select('*')
        .order('fetch_date', { ascending: false })
        .limit(5)
      
      if (logs && logs.length > 0) {
        logs.forEach(log => {
          console.log(`   ${log.fetch_date}: ${log.start_date} ‚Üí ${log.end_date} (${log.days_fetched} jours)`)
        })
      } else {
        console.log('   Aucun bulk fetch enregistr√©')
      }
    }
  } catch (error) {
    console.log('   ‚ùå Erreur lors de la lecture des logs:', error)
  }
}